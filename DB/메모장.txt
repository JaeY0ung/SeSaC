.tables
----------------------------------------------------------
SELECT * FROM people WHERE first_name LIKE 'first%';

SELECT * from people;

CREATE TABLE people(
id INTEGER PRIMARY KEY AUTOINCREMENT,
first_name TEXT,
last_name TEXT,
age INTEGER,
gender TEXT
);

DROP TABLE people;

INSERT INTO people VALUES (1, 'first1', 'last1', 21, 'M');
INSERT INTO people VALUES (2, 'first2', 'last2', 22, 'F');
INSERT INTO people VALUES (3, 'first3', 'last3', 23, 'M');
INSERT INTO people VALUES (4, 'first4', 'last4', 24, 'F');
----------------------------------------------------------
CREATE TABLE product (name TEXT, num INTEGER, price INTEGER, discount INTEGER);
SELECT * from product;

INSERT INTO product VALUES ('Mouse', 7, 2500, 0);
INSERT INTO product VALUES ('Laptop', 2, 65000, 12000);
INSERT INTO product VALUES ('Monitor', 4, 35000, 0);
INSERT INTO product VALUES ('Printer', 5, 8000, 2000);
INSERT INTO product VALUES ('Keyboard', 4, 10000, 0);

SELECT *, price - discount FROM product;
----------------------------------------------------------
CREATE TABLE exam ( name TEXT, result INTEGER);

INSERT INTO exam VALUES('Kim' , 75);
INSERT INTO exam VALUES('Lee' , 98);
INSERT INTO exam VALUES('Jack', 69);
INSERT INTO exam VALUES('rich', 80);

SELECT name, result, 
CASE
    WHEN result > 88 THEN 'PASS'
    WHEN result > 70 THEN 'Check'
    ELSE 'FAIL'
END AS judgement
FROM exam;
----------------------------------------------------------
CREATE TABLE user ( gender TEXT, city TEXT );

INSERT INTO user VALUES('M', "busan");
INSERT INTO user VALUES('F', "seoul");
INSERT INTO user VALUES('M', "busan");
INSERT INTO user VALUES('F', "dajeon");

SELECT * FROM user;
SELECT COUNT(*) FROM user; <= 매우매우 중요
SELECT gender , COUNT(*) FROM user GROUP BY gender;
SELECT gender, COUNT(*) FROM user GROUP BY city;
SELECT city, COUNT(*) FROM user GROUP BY city;
SELECT gender, city, count(*) FROM user GROUP BY gender, city;
----------------------------------------------------------
CREATE TABLE store(branch TEXT, sales INTEGER);

INSERT INTO store VALUES ('Seoul', 150);
INSERT INTO store VALUES ('Busan', 450);
INSERT INTO store VALUES ('Daegu', 300);
INSERT INTO store VALUES ('Seoul', 250);

SELECT SUM(sales), TOTAL(sales) FROM store

SELECT branch, SUM(sales) FROM store GROUP BY  branch;

SELECT branch, SUM(sales), AVG(sales) FROM store GROUP BY branch;

SELECT MAX(sales), MIN(sales) FROM store;

SELECT branch, MAX(sales), MIN(sales) FROM store GROUP BY branch;

----------------------------------------------------------

DROP TABLE user;

CREATE TABLE users(
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    username TEXT,
    password TEXT
);

INSERT INTO users(username,password) VALUES("user1","abcd1111");
INSERT INTO users(username,password) VALUES("user2","abcd2222");
INSERT INTO users(username,password) VALUES("user3","abcd3333");

SELECT * FROM users
WHERE username="user1"
AND
password="abcd0000";

SELECT * FROM users
WHERE username="user1"
AND
password="abcd1111";

----------------------------------------------------------
 <과제>
1. non_usa_customers.sql: Provide a query showing Customers (just their full names, customer ID and country) who are not in the US.
2. brazil_customers.sql: Provide a query only showing the Customers from Brazil.
3. brazil_customers_invoices.sql: Provide a query showing the Invoices of customers who are from Brazil. The resultant table should show the customer's full name, Invoice ID, Date of the invoice and billing country.
4. sales_agents.sql: Provide a query showing only the Employees who are Sales Agents.
5. unique_invoice_countries.sql: Provide a query showing a unique/distinct list of billing countries from the Invoice table.
6. sales_agent_invoices.sql: Provide a query that shows the invoices associated with each sales agent. The resultant table should include the Sales Agent's full name.
7. invoice_totals.sql: Provide a query that shows the Invoice Total, Customer name, Country and Sale Agent name for all invoices and customers.
8. total_invoices_{year}.sql: How many Invoices were there in 2009 and 2011?
9. total_sales_{year}.sql: What are the respective total sales for each of those years?
10. invoice_37_line_item_count.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for Invoice ID 37.
11. line_items_per_invoice.sql: Looking at the InvoiceLine table, provide a query that COUNTs the number of line items for each Invoice. HINT: GROUP BY
12. line_item_track.sql: Provide a query that includes the purchased track name with each invoice line item.
13. line_item_track_artist.sql: Provide a query that includes the purchased track name AND artist name with each invoice line item.
14. country_invoices.sql: Provide a query that shows the # of invoices per country. HINT: GROUP BY
15. playlists_track_count.sql: Provide a query that shows the total number of tracks in each playlist. The Playlist name should be include on the resulant table.
16. tracks_no_id.sql: Provide a query that shows all the Tracks, but displays no IDs. The result should include the Album name, Media type and Genre.
17. invoices_line_item_count.sql: Provide a query that shows all Invoices but includes the # of invoice line items.
18. sales_agent_total_sales.sql: Provide a query that shows total sales made by each sales agent.
19. top_2009_agent.sql: Which sales agent made the most in sales in 2009?
    Hint: Use the MAX function on a subquery. top_agent.sql: Which sales agent made the most in sales over all?
21. sales_agent_customer_count.sql: Provide a query that shows the count of customers assigned to each sales agent.
22. sales_per_country.sql: Provide a query that shows the total sales per country.
23. top_country.sql: Which country's customers spent the most?
24. top_2013_track.sql: Provide a query that shows the most purchased track of 2013.
25. top_5_tracks.sql: Provide a query that shows the top 5 most purchased songs.
26. top_3_artists.sql: Provide a query that shows the top 3 best selling artists.
27. top_media_type.sql: Provide a query that shows the most purchased Media Type.


SELECT FirstName, LastName, CustomerId, Country FROM customers WHERE country != 'USA';

SELECT DISTINCT country FROM customers;

----------------------------------------------------------
<SQL 문법 공부>

- 테이블 생성
CREATE TABLE tablename( elementkey1 INTEGER, elementkey2 TEXT, elementkey3 INTEGER );

- 원하는 정보 추출
SELECT  *                    FROM  tablename WHERE elementkey   LIKE 'findvalue%';
SELECT  COUNT(*)             FROM  user;                                          <= 매우매우 중요
SELECT  *, price - discount  FROM  product;
SELECT name, result, 
CASE
    WHEN result > 88 THEN 'PASS'
    WHEN result > 70 THEN 'Check'
    ELSE 'FAIL'
END AS judgement
FROM exam;


- 원하는 데이터 삽입
INSERT INTO tablename VALUES (elementvalue1, elementvalue2, elementvalue3);
INSERT INTO tablename(elementkey1, elementkey2, elementkey3) VALUES (elementvalue1, elementvalue2, elementvalue3);

- 테이블 삭제
DROP TABLE tablename;

DATE_FORMAT(HIRE_YMD, '%Y-%m-%d') AS HIRE_YMD